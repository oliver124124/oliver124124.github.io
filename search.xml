<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>centos安装环境</title>
    <url>/centos%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/centos%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看java安装包</span></span><br><span class="line">yum list java *</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装jdk1.8</span></span><br><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure>



<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看mysql安装包</span></span><br><span class="line">yum list mysql*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载mysql5.7安装包</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装mysql安装源</span></span><br><span class="line">yum -y localinstall mysql57-community-release-el7-11.noarch.rpm </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动mysql服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机自启动</span></span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    mysql安装完之后，会生成一个默认密码在/var/log/mysqld.log</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/oliver124124/img/master/img/20210822161220.png" alt="截屏2021-08-22 下午3.45.28"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>​    输入刚才的默认密码1%(Yqtxdyka) 1%Yuanchengyong</p>
<p><img data-src="https://raw.githubusercontent.com/oliver124124/img/master/img/20210822161108.png" alt="截屏2021-08-22 下午4.06.26"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更改密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你想要改的密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>可能会出现以下错误，原因是没有符合mysql默认的密码策略</p>
<p><img data-src="https://raw.githubusercontent.com/oliver124124/img/master/img/20210822164058.png" alt="截屏2021-08-22 下午4.40.56"></p>
<p>关于mysql的密码策略可以看<a href="/centos%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/mysql%E5%AF%86%E7%A0%81%E7%AD%96%E7%95%A5/" title="mysql密码策略">mysql密码策略</a>进行设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置远程登录</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;你想要的密码&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">刷新权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span><span class="bash">退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置mysql的默认编码为utf-8</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash">在其中添加以下代码</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">:wq保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启mysql</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">登录mysql</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看编码</span></span><br><span class="line">show variables like &#x27;%character%&#x27;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/oliver124124/img/master/img/20210912152011.png" alt="截屏2021-09-12 下午3.20.07"></p>
<p>接下来就可以用client进行远程连接了</p>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装docker</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机自启动</span></span><br><span class="line">systemctl enable docker.service</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>centos配置环境</category>
      </categories>
  </entry>
  <entry>
    <title>mysql密码策略</title>
    <url>/centos%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/mysql%E5%AF%86%E7%A0%81%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输入查看密码策略（前提有安装validate_password插件，一般都默认安装）</span></span><br><span class="line">show variables like &#x27;validate_password%&#x27;;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/oliver124124/img/master/img/20210822164352.png" alt="截屏2021-08-22 下午4.43.49" /></p>
<span id="more"></span>
<p>可以看到七个参数：</p>
<ul>
<li>
<p>validate_password_check_user_name：是否将密码与当前会话的帐户的用户名部分进行比较，如果匹配则将其拒绝</p>
</li>
<li>
<p>validate_password_length：密码的最小长度</p>
</li>
<li>
<p>validate_password_dictionary_file：密码验证的字典文件路径</p>
</li>
<li>
<p>validate_password_mixed_case_count：密码中至少包含的大小写字母个数</p>
</li>
<li>
<p>validate_password_number_count：密码中至少包含的数字个数</p>
</li>
<li>
<p>validate_password_policy：密码的强度验证等级</p>
<p>分为三种：</p>
<ol>
<li>LOW：只验证密码长度</li>
<li>MEDIUM：验证密码长度、包含数字个数、包含大小写字母个数、包含特殊字符个数</li>
<li>STRONG：验证密码长度、包含数字个数、包含大小写字母个数、包含特殊字符个数、字典文件；</li>
</ol>
</li>
<li>
<p>validate_password_special_char_count： 密码中至少包含特殊字符的个数</p>
</li>
</ul>
<p>  所有的设置都可以使用set global+参数名进行设置，例如<code>set global validate_password_length=6;</code>就可以设置密码最短长度为6位</p>
<p>  主要是用的是密码强度验证等级，例如上图的默认设置，验证密码长度、数字个数、大小写字母个数、特殊字符个数，那么密码至少包含一位数字，一个大写字母，一个小写字母，一个特殊字符，至少为4位，剩下的随意补充，因此最短长度不能设置为少于4位，这个长度会随着其余参数的修改动态修改。</p>
]]></content>
      <categories>
        <category>centos配置环境</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>try、catch、finally带return时的执行情况</title>
    <url>/java/try%E3%80%81catch%E3%80%81finally%E5%B8%A6return%E6%97%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol>
<li>finally中的代码一定会被执行，不管有没有异常，如果没有异常就执行完try再执行finally，有异常就去执行catch，执行完再执行finally</li>
<li>就算try和catch中有return，依然会执行finally</li>
<li>finally的执行是在try和catch的return表达式执行之后的，会先把返回的值保存到栈中，等finally执行完再返回（哪怕finally改变了值依然不影响返回到值），但是如果改变了返回的对象中的值，那么返回的是会有影响的</li>
<li>如果finally中有return，那会提前返回，不会返回try和catch中的值</li>
</ol>
<span id="more"></span>

<h2 id="情况讨论-基本类型"><a href="#情况讨论-基本类型" class="headerlink" title="情况讨论(基本类型)"></a>情况讨论(基本类型)</h2><ol>
<li><h3 id="try-catch-finally-return"><a href="#try-catch-finally-return" class="headerlink" title="try{}catch(){}finally{} return;"></a>try{}catch(){}finally{} return;</h3><p>​        正常情况，程序按正常顺序执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return：&quot;</span> + test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch: &quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line">last</span><br><span class="line"><span class="keyword">return</span>：<span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="try-return-catch-finally-return"><a href="#try-return-catch-finally-return" class="headerlink" title="try{return;}catch(){}finally{} return;"></a>try{return;}catch(){}finally{} return;</h3><p>​        程序会先执行try中的代码（除了return返回），包括return中的表达式也会执行，之后执行finally中的代码，最后执行try中的return（finally对于返回值不影响），因为在try中已经return，finally之后的代码不执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return：&quot;</span> + test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer x = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch: &quot;</span> + x);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">return</span>：<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="try-catch-return-finally-return"><a href="#try-catch-return-finally-return" class="headerlink" title="try{ } catch(){return;} finally{} return;"></a>try{ } catch(){return;} finally{} return;</h3><p>​        程序会先执行try中的代码，遇到异常执行catch中的代码，同样会执行到return，包含return中的表达式，然后执行finally中的代码，最后catch返回值（finally改变值不影响返回值），finally之后的代码不执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return：&quot;</span> + test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer x = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;<span class="comment">//造个异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch前: &quot;</span> + x);</span><br><span class="line">            x = <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch: &quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">        System.out.println(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">catch</span>前: <span class="number">1</span></span><br><span class="line"><span class="keyword">catch</span>: <span class="number">2</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">4</span></span><br><span class="line"><span class="keyword">return</span>：<span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="try-return-catch-finally-return-1"><a href="#try-return-catch-finally-return-1" class="headerlink" title="try{ return; }catch(){} finally{return;}"></a>try{ return; }catch(){} finally{return;}</h3><p>​        程序先执行try中的代码（包括return中的表达式），除了return返回，然后执行finally，但是finally之中有return，所以提前返回了，没有执行try中的返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return：&quot;</span> + test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer x = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch前: &quot;</span> + x);</span><br><span class="line">            x = <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch: &quot;</span> + x);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">return</span>：<span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="try-catch-return-finally-return-1"><a href="#try-catch-return-finally-return-1" class="headerlink" title="try{} catch(){return;}finally{return;}"></a>try{} catch(){return;}finally{return;}</h3><p>​        同样先执行try中的代码，遇到异常执行catch，执行catch中除了return的代码（包括return中的表达式），然后执行finally，同样因为finally中有return，提前返回了，没有执行catch中的返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return：&quot;</span> + test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer x = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;<span class="comment">//造个异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch前: &quot;</span> + x);</span><br><span class="line">            x = <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch: &quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">catch</span>前: <span class="number">1</span></span><br><span class="line"><span class="keyword">catch</span>: <span class="number">2</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">4</span></span><br><span class="line"><span class="keyword">return</span>：<span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>​        对于基本类型，会先执行try中的代码，遇到异常执行catch中的代码，这两块都会执行到return（包括return中的表达式）但不返回值，先把值放在栈中，最后执行finally中的代码，finally中改变了返回的变量返回值也不会改变，但是finally中return了就会提前return finally中的值（finally中写return编译器会警告）</p>
<h2 id="情况讨论（对象）"><a href="#情况讨论（对象）" class="headerlink" title="情况讨论（对象）"></a>情况讨论（对象）</h2><ol>
<li><h3 id="try-catch-finally-return-1"><a href="#try-catch-finally-return-1" class="headerlink" title="try{}catch(){}finally{} return;"></a>try{}catch(){}finally{} return;</h3><p>正常情况，程序按正常顺序执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return: &quot;</span> + testObject().x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> TestObject <span class="title">testObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestObject t = <span class="keyword">new</span> TestObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + t.x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch：&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        TestObject() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: <span class="number">0</span></span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line"><span class="keyword">return</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="try-return-catch-finally-return-2"><a href="#try-return-catch-finally-return-2" class="headerlink" title="try{return;}catch(){}finally{} return;"></a>try{return;}catch(){}finally{} return;</h3><p>​        与基本类型相同，不过不一样的是在finally中改变了对象的值导致返回值也改变</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return: &quot;</span> + testObject().x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> TestObject <span class="title">testObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestObject t = <span class="keyword">new</span> TestObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.x = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch：&quot;</span> + t.x);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t.x = <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + t.x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        TestObject() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h3 id="try-catch-return-finally-return-2"><a href="#try-catch-return-finally-return-2" class="headerlink" title="try{ } catch(){return;} finally{} return;"></a>try{ } catch(){return;} finally{} return;</h3><p>​        同样与基本类型相同，finally中改变了对象中的属性导致返回值变更</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return: &quot;</span> + testObject().x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> TestObject <span class="title">testObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestObject t = <span class="keyword">new</span> TestObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.x = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;<span class="comment">//造个异常</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            t.x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch：&quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t.x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + t.x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        TestObject() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">catch</span>：<span class="number">2</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">return</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>try{ return; }catch(){} finally{return;}</p>
<p>​    执行顺序与基本类型一致</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return: &quot;</span> + testObject().x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> TestObject <span class="title">testObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestObject t = <span class="keyword">new</span> TestObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.x = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            t.x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch：&quot;</span> + t.x);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t.x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        TestObject() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><h3 id="try-catch-return-finally-return-3"><a href="#try-catch-return-finally-return-3" class="headerlink" title="try{} catch(){return;}finally{return;}"></a>try{} catch(){return;}finally{return;}</h3><p>执行顺序与基本类型一致</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return: &quot;</span> + testObject().x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> TestObject <span class="title">testObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestObject t = <span class="keyword">new</span> TestObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.x = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;try: &quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;<span class="comment">//造个异常</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            t.x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch：&quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t.x++;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally: &quot;</span> + t.x);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        TestObject() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">try</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">catch</span>：<span class="number">2</span></span><br><span class="line"><span class="keyword">finally</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">return</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h3><p>​        对象与基本类型的执行顺序并无差别，但是如果在finally中改变返回对象的值会导致返回不同。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
</search>
